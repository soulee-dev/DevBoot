version: "3.9"
services:
  coder:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    env_file: .env
    ports:
      - "7080:7080"
      - "2112:2112"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      database:
        condition: service_healthy
    restart: always

  database:
    image: "postgres:14.2"
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - coder_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  backend:
    build: ./backend
    env_file: .env
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: always

  frontend:
    build: ./frontend
    env_file: .env
    environment:
      - NODE_ENV=production
    ports:
      - "3000:3000"
    command: npm start
    restart: always

  portainer:
    image: portainer/portainer-ce:latest
    env_file: .env
    container_name: portainer
    restart: always
    ports:
      - "8000:8000"
      - "9443:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    command: --admin-password ${PORTAINER_CREDENTIAL}

  grafana:
    image: grafana/grafana:latest
    env_file: .env
    ports:
      - "4000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: always

volumes:
  coder_data:
  portainer_data:
  grafana-data:
